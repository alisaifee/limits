name: CI

on: [push, pull_request]

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
    steps:
    - uses: actions/checkout@v4
    - name: Install uv and Python
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true
        python-version: ${{ matrix.python-version }}
    - name: Setup uv venv
      run: |
        uv sync --locked --all-extras --group ci
    - name: Lint with ruff
      run: |
        uv run ruff check --select I limits tests
        uv run ruff format --check limits tests
        uv run ruff check limits tests
    - name: Check types
      run: |
        uv run mypy limits
  test:
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]
        marker: [not (integration or benchmark)]
        os: [ubuntu-latest]
        async_redis_implementation: ["coredis"]
        include:
          - python-version: "3.10"
            marker: 'not benchmark'
            os: ubuntu-latest
          - python-version: "3.11"
            marker: 'not benchmark'
            os: ubuntu-latest
          - python-version: "3.12"
            marker: 'not benchmark'
            os: ubuntu-latest
          - python-version: "3.12"
            marker: 'not benchmark and (redis or redis_cluster or redis_sentinel) and asyncio'
            os: ubuntu-latest
            async_redis_implementation: "redispy"
          - python-version: "3.13"
            marker: 'not benchmark and (redis or redis_cluster or redis_sentinel) and asyncio'
            os: ubuntu-latest
            async_redis_implementation: "redispy"
          - python-version: "3.12"
            marker: 'not benchmark and (memcached and asyncio)'
            os: ubuntu-latest
            async_memcached_implementation: "emcache"
          - python-version: "3.13"
            marker: 'not benchmark'
            os: ubuntu-latest
    runs-on: "${{ matrix.os }}"
    steps:
    - uses: actions/checkout@v4
    - name: Install uv and Python
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true
        python-version: ${{ matrix.python-version }}
    - name: Setup uv venv
      run: |
        uv sync --locked --all-extras --group ci
    - name: Tests
      env:
        CI: "True"
        ASYNC_REDIS_IMPLEMENTATION: "${{ matrix.async_redis_implementation }}"
        ASYNC_MEMCACHED_IMPLEMENTATION: "${{ matrix.async_memcached_implementation }}"
      run: |
        uv run py.test -m "${{ matrix.marker }}" --junitxml=junit.xml -o junit_family=legacy --cov-branch --max-runs=3
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    - name: Upload test results to Codecov
      if: ${{ !cancelled() }}
      uses: codecov/test-results-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

  benchmark:
    needs: [lint]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.13"]
    env:
      BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
      COMMIT: ${{ github.sha }}
    steps:
    - uses: actions/checkout@v4
    - name: Install uv and Python
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true
        python-version: ${{ matrix.python-version }}
    - name: Setup uv venv
      run: |
        uv sync --locked --all-extras --group ci
    - name: Set up Node
      uses: actions/setup-node@v4
    - name: Install dependencies
      run: |
        npm install -g netlify-cli
    - name: Benchmark
      env:
        CI: "True"
      run: |
        mkdir -p benchmarks
        uv run pytest -m "benchmark" --benchmark-json=benchmarks/full.json
    - name: Split results
      run: |
        mv benchmarks/full.json benchmarks/full_raw.json
        jq '.benchmarks |= map(. + {name: (.name | sub("^test_"; "")), fullname: (.fullname | sub("^.*::test_"; ""))})' benchmarks/full_raw.json > benchmarks/benchmark.json
        jq '.benchmarks |= map(del(.stats.data))' benchmarks/benchmark.json > benchmarks/benchmark-summary.json
        storages=("memory" "redis" "memcached" "mongodb");
        for storage in "${storages[@]}"; do
            cat benchmarks/benchmark.json | jq --arg storage "$storage" '.benchmarks |= map(select(.params.storage_type==$storage))' > benchmarks/benchmark-$storage.json
            cat benchmarks/benchmark-summary.json | jq --arg storage "$storage" '.benchmarks |= map(select(.params.storage_type==$storage))' > benchmarks/benchmark-$storage-summary.json
        done
        rm benchmarks/full_raw.json
    - name: Upload benchmark results
      if: github.repository_owner == 'alisaifee' && github.event_name == 'push'
      uses: actions/upload-artifact@v4
      with:
        name: benchmark
        path: benchmarks/*
    - name: Deploy to Netlify
      if: github.repository_owner == 'alisaifee' && github.event_name == 'push'
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
      run: |
        cp _netlify_headers benchmarks/_headers
        netlify deploy --site ${{ secrets.NETLIFY_SITE_ID }} --alias $COMMIT --dir=benchmarks --message "Benchmarks for $COMMIT"
        netlify deploy --site ${{ secrets.NETLIFY_SITE_ID }} --alias $BRANCH_NAME --dir=benchmarks --message "Benchmarks for $BRANCH_NAME"
  build_wheels:
    needs: [lint]
    name: Build wheel
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install uv and Python
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          python-version: ${{ matrix.python-version }}
      - name: Setup uv venv
        run: |
          uv sync --locked --all-extras --group ci
      - name: Build wheels
        run: |
          uv build --wheel
      - uses: actions/upload-artifact@v4
        with:
          name: wheels
          path: ./dist/*.whl
  build_sdist:
    needs: [lint]
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install uv and Python
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          python-version: ${{ matrix.python-version }}
      - name: Setup uv venv
        run: |
          uv sync --locked --all-extras --group ci
      - name: Build sdist
        run: |
          uv build --sdist
      - uses: actions/upload-artifact@v4
        with:
          name: src_dist
          path: dist/*.tar.gz
  upload_pypi:
    needs: [test, build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    permissions:
      id-token: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: wheels
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: src_dist
          path: dist
      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository_url: https://test.pypi.org/legacy/
          skip_existing: true
  upload_pypi_release:
    needs: [test, benchmark, build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    permissions:
      id-token: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: wheels
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: src_dist
          path: dist
      - uses: pypa/gh-action-pypi-publish@release/v1
  github_release:
    needs: [upload_pypi_release]
    name: Create Release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download wheel artifacts
        uses: actions/download-artifact@v4
        with:
          name: wheels
          path: dist
      - name: Download source artifacts
        uses: actions/download-artifact@v4
        with:
          name: src_dist
          path: dist
      - name: Download benchmark results
        uses: actions/download-artifact@v4
        with:
          name: benchmark
          path: benchmarks
      - name: Generate release notes
        run: |
          ./scripts/github_release_notes.sh > release_notes.md
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "dist/*,benchmarks/*"
          bodyFile: release_notes.md
          token: ${{ secrets.GITHUB_TOKEN }}



